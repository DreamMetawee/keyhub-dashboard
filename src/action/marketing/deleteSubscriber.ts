'use server';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';

/**
 * ‡∏•‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @param formData ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Form ‡∏ó‡∏µ‡πà‡∏°‡∏µ hidden input ‡∏ä‡∏∑‡πà‡∏≠ 'subscriberId'
 */
export async function deleteSubscriber(formData: FormData) {
  const subscriberId = formData.get('subscriberId') as string;

  try {
    await prisma.emailSubscriber.delete({
      where: { id: subscriberId },
    });
    
    // üí° ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ Admin ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    revalidatePath('/admin/subscribers'); 
    return { success: true, message: `Email ${subscriberId.substring(0, 8)}... unsubscribed successfully.` };
  } catch (e) {
    console.error('Delete Subscriber Error:', e);
    return { error: 'Failed to delete subscriber. Database error.' };
  }
}