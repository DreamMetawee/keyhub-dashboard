generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------
// ตารางสำหรับ ระบบผู้ใช้ (Register/Login)
// ------------------------------------
model User {
  id               Int              @id @default(autoincrement())
  email            String           @unique
  password         String           @db.Text
  name             String?
  createdAt        DateTime         @default(now())

  // ความสัมพันธ์กับตารางอื่น ๆ
  subscriptions    Subscription[]
  carts            Cart[]
  orders           Order[]
  productInterests ProductInterest[]
}

// ------------------------------------
// ตารางสำหรับ ระบบสมัครสมาชิก (Subscription)
// ------------------------------------
model SubscriptionPlan {
  id           String         @id @default(uuid())
  name         String         @unique
  price        Float
  durationInDays Int
  details      String?
  
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  endDate   DateTime
  status    String   @default("Active")

  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  planId    String
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
}

// ------------------------------------
// ตารางสำหรับ ร้านค้าออนไลน์ขายเกมคีย์
// ------------------------------------
model Game {
  id            Int      @id @default(autoincrement())
  title         String
  slug          String   @unique
  price         Float
  discount      Float    @default(0)
  imageUrl      String
  category      String
  createdAt     DateTime @default(now())
  
  gameKeys          GameKey[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
  productInterests  ProductInterest[]
}

model GameKey {
  id        Int   @id @default(autoincrement())
  key       String   @unique
  status    String   @default("Available")
  createdAt DateTime @default(now())
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  
  orderItem OrderItem?
}

model Cart {
  id        String   @id @default(uuid())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  
  @@unique([cartId, gameId])
}

model Order {
  id        String   @id @default(uuid())
  orderDate DateTime @default(now())
  totalAmount Float
  status    String   @default("Pending")
  createdAt DateTime @default(now())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  items     OrderItem[]
  Payment   Payment[]
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  pricePaid Float
  createdAt DateTime @default(now())

  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])

  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])
  
  gameKeyId Int   @unique
  gameKey   GameKey @relation(fields: [gameKeyId], references: [id])
}

// ------------------------------------
// การตลาดดิจิทัล
// ------------------------------------
model EmailSubscriber {
  id           String   @id @default(uuid())
  email        String   @unique
  subscribedAt DateTime @default(now())
  source       String?
  favoriteGenre String?
  topics       String?
}

model ProductInterest {
  id           String   @id @default(uuid())
  interestType String

  userId       Int?
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  gameId       Int
  game         Game     @relation(fields: [gameId], references: [id])

  createdAt    DateTime @default(now())
}

model Payment {
  id          String   @id @default(uuid())
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  amount      Float
  method      String
  status      String
  createdAt   DateTime @default(now())
}

model CouponPromotion {
  id        String   @id @default(uuid())
  code      String   @unique
  discount  Float
  type      String
  expiresAt DateTime
  isActive  Boolean  @default(true)
}
